(+ 1 2)
(define a 3)
(define (b x) (+ 1 x))
(define c (/ (+ 5 4 
      (- 2 
         (- 3 
            (+ 6 
               (/ 4 5)))))
   (* 3 
      (- 6 2)
      (- 2 7))))

(define x -1)
(if (< x 0)
    (- x)
     x)

(cond ((< x 0) (- x))
        (else x))

(begin (+ 1 1) (+ 2 2) (+ 3 3))

(let ((y (+ 3 1)))
    (* x y))

(and (> 1 0) (> 2 1) 3)

(or (< 1 0) (< 2 1) 3)

(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))

(fib 3)

(define (fib-iter a b count)
        (if (= count 0)
            b
            (fib-iter (+ a b) a (- count 1))))

(define (fib2 n)
    (fib-iter 1 0 n))

(fib2 3)