-2.5+0.0i
(define a 3)
(define (b x) (+ 1 x))
(define c (lambda (x) (+ 1 x)))

(b a)
(c a)
(+ 1 a)
(+ 1 2)
(+ 5 3 4)

(define (d xx) (lambda (x) (+ xx x)))

((d 1) a)

(- a 1)
(= a 3)
(= a 1)

(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))

(fib 10)

(define (fib2 n)
    (define (fib-iter a b count)
        (if (= count 0)
            b
            (fib-iter (+ a b) a (- count 1))))
    (fib-iter 1 0 n))

(fib2 10)


(eq? 'a 'a)  ;#t
(eq? '() '())  ;#t
(eq? 2 2)  ;#t

(complex? 3+4i)                 ;  #t
(complex? 3)                    ;  #t
(real? 3)                       ;  #t
(real? -2.5+0.0i)               ;  #t
(real? #e1e10)                  ;  #t
(rational? 6/10)                ;  #t
(rational? 6/3)                 ;  #t
(integer? 3+0i)                 ;  #t
(integer? 3.0)                  ;  #t
(integer? 8/4)                  ;  #t
3+4i
-2.5+0.0i
 6/10
 6/3
 3+0i
 3.0
 8/4
#e1e10
(+ 3 4)                        ;  7
(+ 3)                          ;  3
(+)                            ;  0
(* 4)                          ;  4
(*)                            ;  1
(- 3 4)                        ;  -1
(- 3 4 5)                      ;  -6
(- 3)                          ;  -3
(/ 3 4 5)                      ;  3/20
(/ 3)                          ;  1/3
