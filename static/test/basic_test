-2.5+0.0i
(define a 3)
(define (b x) (+ 1 x))
(define c (lambda (x) (+ 1 x)))

(b a)
(c a)
(+ 1 a)
(+ 1 2)
(+ 5 3 4)

(define (d xx) (lambda (x) (+ xx x)))

((d 1) a)

(- a 1)
(= a 3)
(= a 1)

(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))

(fib 10)

(define (fib2 n)
    (define (fib-iter a b count)
        (if (= count 0)
            b
            (fib-iter (+ a b) a (- count 1))))
    (fib-iter 1 0 n))

(fib2 10)


(eq? 'a 'a)  ;#t
(eq? '() '())  ;#t
(eq? 2 2)  ;#t

(complex? 3+4i)                 ;  #t
(complex? 3)                    ;  #t
(real? 3)                       ;  #t
(real? -2.5+0.0i)               ;  #t
(real? #e1e10)                  ;  #t
(rational? 6/10)                ;  #t
(rational? 6/3)                 ;  #t
(integer? 3+0i)                 ;  #t
(integer? 3.0)                  ;  #t
(integer? 8/4)                  ;  #t
3+4i
-2.5+0.0i
 6/10
 6/3
 3+0i
 3.0
 8/4
#e1e10
(+ 3 4)                        ;  7
(+ 3)                          ;  3
(+)                            ;  0
(* 4)                          ;  4
(*)                            ;  1
(- 3 4)                        ;  -1
(- 3 4 5)                      ;  -6
(- 3)                          ;  -3
(/ 3 4 5)                      ;  3/20
(/ 3)                          ;  1/3

(define (test-let y) 
    (let ((x 3))
    (* x y)))

(test-let 123)

(define (even? n)
  (= (remainder n 2) 0))

(even? 123)
(even? 124)

(gcd (* 123 4545) (* 4521 452))

(and (= 1 1) (>= 2 1) (<= 2 1))
(or (= 2 1) (>= 1 2) (<= 1 2))


(define (make-rat n d) (cons n d))

(define (numer x) (car x))

(define (denom x) (cdr x))

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define one-half (make-rat 1 2))

(print-rat one-half)

(define one-third (make-rat 1 3))

(print-rat (add-rat one-half one-third))
(print-rat (mul-rat one-half one-third))
(print-rat (add-rat one-third one-third))


(define (square x) (* x x))

(square 4)

(define (abs x)
  (cond ((< x 0) (- x))
        (else x)))
(abs -1)
(abs 1)
(/ (+ 5 4 
      (- 2 
         (- 3 
            (+ 6 
               (/ 4 5)))))
   (* 3 
      (- 6 2)
      (- 2 7)))

(define (mi a b) 
    (if (< a b) a b))

(define (maxTwo a b c) 
        (- (+ a b c)
           (mi a (mi b c))))
(maxTwo 5 2 3)

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (sqrt x)
  (sqrt-iter 1.0 x))

(sqrt 1)
(sqrt 2)
(sqrt 3)