(self.webpackChunkts_test=self.webpackChunkts_test||[]).push([[140],{5046:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-046b060f",path:"/chap1/1-1.html",title:"1.1 程序设计的基本元素",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"练习1.1",slug:"练习1-1",children:[]},{level:2,title:"练习1.2",slug:"练习1-2",children:[]},{level:2,title:"练习1.3",slug:"练习1-3",children:[]},{level:2,title:"练习1.4",slug:"练习1-4",children:[]},{level:2,title:"练习1.5",slug:"练习1-5",children:[]},{level:2,title:"练习1.6",slug:"练习1-6",children:[]},{level:2,title:"练习1.8",slug:"练习1-8",children:[]}],filePathRelative:"chap1/1-1.md",git:{updatedTime:1621692769e3,contributors:[]}}},5584:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>m});var p=a(6252),t=a(3577);const e=(0,p.uE)('<h1 id="_1-1-程序设计的基本元素"><a class="header-anchor" href="#_1-1-程序设计的基本元素">#</a> 1.1 程序设计的基本元素</h1><h2 id="练习1-1"><a class="header-anchor" href="#练习1-1">#</a> 练习1.1</h2><p>复制到解释器里运行一下吧！</p><div class="language-scheme ext-scheme line-numbers-mode"><pre class="language-scheme"><code> <span class="token number">10</span>\n\n <span class="token punctuation">(</span><span class="token operator">+</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span>\n\n <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">9</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\n <span class="token punctuation">(</span><span class="token operator">/</span> <span class="token number">6</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\n <span class="token punctuation">(</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span> <span class="token number">2</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">4</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n <span class="token punctuation">(</span><span class="token keyword">define</span> a <span class="token number">3</span><span class="token punctuation">)</span>\n\n <span class="token punctuation">(</span><span class="token keyword">define</span> b <span class="token punctuation">(</span><span class="token operator">+</span> a <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n <span class="token punctuation">(</span><span class="token operator">+</span> a b <span class="token punctuation">(</span><span class="token operator">*</span> a b<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n <span class="token punctuation">(</span><span class="token operator">=</span> a b<span class="token punctuation">)</span>\n\n <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">and</span> <span class="token punctuation">(</span><span class="token operator">&gt;</span> b a<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span> b <span class="token punctuation">(</span><span class="token operator">*</span> a b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n     b\n     a<span class="token punctuation">)</span>\n\n <span class="token punctuation">(</span><span class="token keyword">cond</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">=</span> a <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">6</span><span class="token punctuation">)</span>\n       <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">=</span> b <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">+</span> <span class="token number">6</span> <span class="token number">7</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span>\n       <span class="token punctuation">(</span><span class="token keyword">else</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n <span class="token punctuation">(</span><span class="token operator">+</span> <span class="token number">2</span> <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&gt;</span> b a<span class="token punctuation">)</span> b a<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n <span class="token punctuation">(</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">cond</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&gt;</span> a b<span class="token punctuation">)</span> a<span class="token punctuation">)</span>\n \t <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span> a b<span class="token punctuation">)</span> b<span class="token punctuation">)</span>\n \t <span class="token punctuation">(</span><span class="token keyword">else</span> <span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">(</span><span class="token operator">+</span> a <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div>',4),o=(0,p.uE)('<h2 id="练习1-2"><a class="header-anchor" href="#练习1-2">#</a> 练习1.2</h2><p>按照优先级转换一下即可，点击一下代换查看执行顺序</p><div class="language-scheme ext-scheme line-numbers-mode"><pre class="language-scheme"><code><span class="token punctuation">(</span><span class="token operator">/</span> <span class="token punctuation">(</span><span class="token operator">+</span> <span class="token number">5</span> <span class="token number">4</span> \n        <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">2</span> \n            <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">3</span> <span class="token punctuation">(</span><span class="token operator">+</span> <span class="token number">6</span> <span class="token punctuation">(</span><span class="token operator">/</span> <span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n   <span class="token punctuation">(</span><span class="token operator">*</span> <span class="token number">3</span> <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">6</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">2</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',3),c=(0,p.uE)('<h2 id="练习1-3"><a class="header-anchor" href="#练习1-3">#</a> 练习1.3</h2><p>先定义<code>min</code>和<code>max</code>两个函数, 然后就肥肠简单了</p><div class="language-scheme ext-scheme line-numbers-mode"><pre class="language-scheme"><code>\n<span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token builtin">min</span> x y<span class="token punctuation">)</span> \n    <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&gt;</span> x y<span class="token punctuation">)</span> y\n        x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token builtin">max</span> x y<span class="token punctuation">)</span> \n    <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span> x y<span class="token punctuation">)</span> y\n        x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token function">bigger-sum</span> x y z<span class="token punctuation">)</span> \n    <span class="token punctuation">(</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token builtin">max</span> x y<span class="token punctuation">)</span>\n       <span class="token punctuation">(</span><span class="token builtin">max</span> <span class="token punctuation">(</span><span class="token builtin">min</span> x y<span class="token punctuation">)</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">(</span><span class="token function">bigger-sum</span>  <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',3),u=(0,p.uE)('<h2 id="练习1-4"><a class="header-anchor" href="#练习1-4">#</a> 练习1.4</h2><p>函数式编程的一个重要思想，函数是一等公民</p><div class="language-scheme ext-scheme line-numbers-mode"><pre class="language-scheme"><code><span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token function">a-plus-abs-b</span> a b<span class="token punctuation">)</span>\n    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&gt;</span> b <span class="token number">0</span><span class="token punctuation">)</span> + -<span class="token punctuation">)</span> a b<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">(</span><span class="token function">a-plus-abs-b</span> <span class="token number">2</span> <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">(</span><span class="token function">a-plus-abs-b</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',3),l=(0,p.uE)('<h2 id="练习1-5"><a class="header-anchor" href="#练习1-5">#</a> 练习1.5</h2><p>在应用序中，所有被传入的实际参数都会立即被求值，因此，在使用应用序的解释器里执行<code>(test 0 (p))</code>时，实际参数 <code>0</code> 和<code> (p)</code> 都会被求值，而对<code>(p)</code>的求值将使解释器进入无限循环</p><p>在正则序中，传入的实际参数只有在有需要时才会被求值，因此，在使用正则序的解释器里运行 <code>(test 0 (p))</code> 时， <code>0</code> 和 <code>(p)</code>都不会立即被求值， 当解释进行到 if 语句时<code>(p)</code>会被跳过</p><div class="language-scheme ext-scheme line-numbers-mode"><pre class="language-scheme"><code><span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token function">test</span> x y<span class="token punctuation">)</span>\n  <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">=</span> x <span class="token number">0</span><span class="token punctuation">)</span>\n      <span class="token number">0</span>\n      y<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">(</span><span class="token function">test</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',4),i=(0,p.uE)('<p>可以试着运行一下，不会搞坏你的浏览器的（</p><h2 id="练习1-6"><a class="header-anchor" href="#练习1-6">#</a> 练习1.6</h2><p>new-if会爆栈，为什么呢？查看一下cond的代换过程帮助你理解if和new-if之间的区别</p><div class="language-scheme ext-scheme line-numbers-mode"><pre class="language-scheme"><code><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token boolean">#t</span> <span class="token punctuation">(</span><span class="token function">display</span> <span class="token string">&quot;good&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">display</span> <span class="token string">&quot;bad&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token function">new-if</span> predicate then-clause else-clause<span class="token punctuation">)</span>\n    <span class="token punctuation">(</span><span class="token keyword">cond</span> <span class="token punctuation">(</span><span class="token function">predicate</span> then-clause<span class="token punctuation">)</span>\n          <span class="token punctuation">(</span><span class="token keyword">else</span> else-clause<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">(</span><span class="token function">new-if</span> <span class="token boolean">#t</span> <span class="token punctuation">(</span><span class="token function">display</span> <span class="token string">&quot;good&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">display</span> <span class="token string">&quot;bad&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',4),r=(0,p.uE)('<p>本质上是因为函数参数需要求值。</p><h2 id="练习1-8"><a class="header-anchor" href="#练习1-8">#</a> 练习1.8</h2><div class="language-scheme ext-scheme line-numbers-mode"><pre class="language-scheme"><code><span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token builtin">abs</span> x<span class="token punctuation">)</span>\n  <span class="token punctuation">(</span><span class="token keyword">cond</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span> x <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">(</span><span class="token keyword">else</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token function">cube</span> x<span class="token punctuation">)</span>\n    <span class="token punctuation">(</span><span class="token operator">*</span> x x x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token builtin">square</span> x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span> x x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token function">cube-root</span> x<span class="token punctuation">)</span>\n    <span class="token punctuation">(</span><span class="token function">cube-root-iter</span> <span class="token number">1.0</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token function">cube-root-iter</span> guess x<span class="token punctuation">)</span>           \n    <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">good-enough?</span> guess x<span class="token punctuation">)</span>             \n        guess\n        <span class="token punctuation">(</span><span class="token function">cube-root-iter</span> <span class="token punctuation">(</span><span class="token function">improve</span> guess x<span class="token punctuation">)</span>\n                        x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token function">good-enough?</span> guess x<span class="token punctuation">)</span>             \n    <span class="token punctuation">(</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token builtin">abs</span> <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token function">cube</span> guess<span class="token punctuation">)</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n       <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token function">improve</span> guess x<span class="token punctuation">)</span>                  \n    <span class="token punctuation">(</span><span class="token operator">/</span> <span class="token punctuation">(</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">/</span> x <span class="token punctuation">(</span><span class="token builtin">square</span> guess<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span> <span class="token number">2</span> guess<span class="token punctuation">)</span><span class="token punctuation">)</span>\n       <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">(</span><span class="token function">cube-root</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">(</span><span class="token function">cube-root</span> <span class="token number">8</span><span class="token punctuation">)</span>\n<span class="token punctuation">(</span><span class="token function">cube-root</span> <span class="token number">27</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>',3);var k=a(542),b=a(7574);const m={data:()=>({msg:{1:"",2:"",3:"",4:"",5:"",6:"",7:""},env:(0,b.n)(),codes:{1:"\n 10\n\n (+ 5 3 4)\n\n (- 9 1)\n\n (/ 6 2)\n\n (+ (* 2 4) (- 4 6))\n\n (define a 3)\n\n (define b (+ a 1))\n\n (+ a b (* a b))\n\n (= a b)\n\n (if (and (> b a) (< b (* a b)))\n     b\n     a)\n\n (cond ((= a 4) 6)\n       ((= b 4) (+ 6 7 a))\n       (else 25))\n\n (+ 2 (if (> b a) b a))\n\n (* (cond ((> a b) a)\n \t ((< a b) b)\n \t (else -1))\n    (+ a 1))\n",2:"\n(/ (+ 5 4 \n        (- 2 \n            (- 3 (+ 6 (/ 4 5)))))\n   (* 3 (- 6 2) (- 2 7)))\n",3:"\n\n(define (min x y) \n    (if (> x y) y\n        x))\n(define (max x y) \n    (if (< x y) y\n        x))\n\n(define (bigger-sum x y z) \n    (+ (max x y)\n       (max (min x y) z)))\n\n(bigger-sum  1 2 3)\n",4:"\n(define (a-plus-abs-b a b)\n    ((if (> b 0) + -) a b))\n(a-plus-abs-b 2 (- 2))\n(a-plus-abs-b 2 2)\n",5:"\n(define (p) (p))\n\n(define (test x y)\n  (if (= x 0)\n      0\n      y))\n\n(test 0 (p))\n",6:'\n(if #t (display "good") (display "bad"))\n\n(define (new-if predicate then-clause else-clause)\n    (cond (predicate then-clause)\n          (else else-clause)))\n(new-if #t (display "good") (display "bad"))\n',7:"\n(define (abs x)\n  (cond ((< x 0) (- x))\n        (else x)))\n(define (cube x)\n    (* x x x))\n(define (square x) (* x x))\n\n(define (cube-root x)\n    (cube-root-iter 1.0 x))\n\n(define (cube-root-iter guess x)           \n    (if (good-enough? guess x)             \n        guess\n        (cube-root-iter (improve guess x)\n                        x)))\n\n(define (good-enough? guess x)             \n    (< (abs (- (cube guess) x))\n       0.001))\n\n(define (improve guess x)                  \n    (/ (+ (/ x (square guess)) (* 2 guess))\n       3))\n\n(cube-root 1)\n(cube-root 8)\n(cube-root 27)\n"}}),created(){},methods:{runBase(n){this.clear(n);let s=this.codes[n];(0,k.K)(s,(s=>{this.msg[n]=this.msg[n]+s}),!1,this.env)},runSub(n){this.clear(n);let s=this.codes[n];(0,k.K)(s,(s=>{this.msg[n]=this.msg[n]+s}),!0,this.env)},clear(n){this.msg[n]=""}},render:function(n,s,a,k,b,m){return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("div",null,[(0,p.Wm)("button",{onClick:s[1]||(s[1]=n=>m.runBase("1"))},"运行"),(0,p.Wm)("button",{onClick:s[2]||(s[2]=n=>m.runSub("1"))},"代换"),(0,p.Wm)("button",{onClick:s[3]||(s[3]=n=>m.clear("1"))},"清除")]),(0,p.Wm)("pre",null," "+(0,t.zw)(b.msg[1])+" ",1),o,(0,p.Wm)("div",null,[(0,p.Wm)("button",{onClick:s[4]||(s[4]=n=>m.runBase("2"))},"运行"),(0,p.Wm)("button",{onClick:s[5]||(s[5]=n=>m.runSub("2"))},"代换"),(0,p.Wm)("button",{onClick:s[6]||(s[6]=n=>m.clear("2"))},"清除")]),(0,p.Wm)("pre",null," "+(0,t.zw)(b.msg[2])+" ",1),c,(0,p.Wm)("div",null,[(0,p.Wm)("button",{onClick:s[7]||(s[7]=n=>m.runBase("3"))},"运行"),(0,p.Wm)("button",{onClick:s[8]||(s[8]=n=>m.runSub("3"))},"代换"),(0,p.Wm)("button",{onClick:s[9]||(s[9]=n=>m.clear("3"))},"清除")]),(0,p.Wm)("pre",null," "+(0,t.zw)(b.msg[3])+" ",1),u,(0,p.Wm)("div",null,[(0,p.Wm)("button",{onClick:s[10]||(s[10]=n=>m.runBase("4"))},"运行"),(0,p.Wm)("button",{onClick:s[11]||(s[11]=n=>m.runSub("4"))},"代换"),(0,p.Wm)("button",{onClick:s[12]||(s[12]=n=>m.clear("4"))},"清除")]),(0,p.Wm)("pre",null," "+(0,t.zw)(b.msg[4])+" ",1),l,(0,p.Wm)("div",null,[(0,p.Wm)("button",{onClick:s[13]||(s[13]=n=>m.runBase("5"))},"运行"),(0,p.Wm)("button",{onClick:s[14]||(s[14]=n=>m.runSub("5"))},"代换"),(0,p.Wm)("button",{onClick:s[15]||(s[15]=n=>m.clear("5"))},"清除")]),(0,p.Wm)("pre",null," "+(0,t.zw)(b.msg[5])+" ",1),i,(0,p.Wm)("div",null,[(0,p.Wm)("button",{onClick:s[16]||(s[16]=n=>m.runBase("6"))},"运行"),(0,p.Wm)("button",{onClick:s[17]||(s[17]=n=>m.runSub("6"))},"代换"),(0,p.Wm)("button",{onClick:s[18]||(s[18]=n=>m.clear("6"))},"清除")]),(0,p.Wm)("pre",null," "+(0,t.zw)(b.msg[6])+" ",1),r,(0,p.Wm)("div",null,[(0,p.Wm)("button",{onClick:s[19]||(s[19]=n=>m.runBase("7"))},"运行"),(0,p.Wm)("button",{onClick:s[20]||(s[20]=n=>m.runSub("7"))},"代换"),(0,p.Wm)("button",{onClick:s[21]||(s[21]=n=>m.clear("7"))},"清除")]),(0,p.Wm)("pre",null," "+(0,t.zw)(b.msg[7])+" ",1)],64)}}}}]);